.. _macros:

Implementing Macros
*******************

This page describes how to implement macros (i.e, extensions) in a wiki engine.
For end user usage, please see :ref:`syntax`.

The `macro_func`
================

`macro_func` is an optional argument used during instantiation of a
:class:`~creoleparser.dialects.Creole10` dialect object. Most often, this function
will act as a dispatcher and call other functions based on the `macro_name`. Using this
method, the `macro_func` can be very simple, particularily if the actual macros
have the same signature.

**A very simple `macro_func`:**

.. code-block:: python

   def macro_dispatcher(macro_name,arg_string,body,isblock,page):
       if macro_name in macros:
           return macros[macro_name](arg_string,body,isblock,page)

In the code above, `macros` is a dictionary of functions. Note that if `macro_name` is
not in the dictionary, or if a macro returns `None`, creoleparser will treat the macro as
unknown and render the raw wikitext unaltered.

Additional information about `macro_func` is documented with the :method:`~creoleparser.dialects.create_dialect` factory function.


Full Macro Example
------------------

The code below is taken from 
`test_cheat_sheet_plus.py <http://code.google.com/p/creoleparser/source/browse/trunk/creoleparser/test_cheat_sheet_plus.py>`_
which is used to generate the `creoleparser cheatsheet <http://creoleparser.googlepages.com/CheatSheetPlus.html>`_ and
help validate any changes made to the library code. 


.. code-block:: python

   import genshi.builder as bldr
   import dialects, core
   import os

   class Page(object):
       root = 'test_pages'
       def __init__(self,page_name):
           self.name = page_name

       def get_raw_body(self):
           try:
               f = open(os.path.join(self.root,self.name + '.txt'),'r')
               s = f.read()
               f.close()
               return s
           except IOError:
               return None

       def exists(self):
           try:
               f = open(os.path.join(self.root,self.name + '.txt'),'r')
               f.close()
               return True
           except IOError:
               return False
           

   def class_func(page_name):
       if not Page(page_name).exists():
           return 'nonexistent'

   def path_func(page_name):
       if page_name == 'Home':
           return 'FrontPage'
       else:
           return page_name

   ## Start of macros
       
   def include(arg_string,body,isblock):
       page = Page(arg_string.strip())
       return text2html.generate(page.get_raw_body())

   def include_raw(arg_string,body,isblock):
       page = Page(arg_string.strip())
       return bldr.tag.pre(page.get_raw_body(),class_='plain')

   def include_source(arg_string,body,isblock):
       page = Page(arg_string.strip())
       return bldr.tag.pre(text2html.render(page.get_raw_body()))

   def source(arg_string,body,isblock):
       return bldr.tag.pre(text2html.render(body))

   def pre(arg_string,body,isblock):
       return bldr.tag.pre(body)

   ## End of macros

   macros = {'include':include,
             'include-raw':include_raw,
             'include-source':include_source,
             'source':source,
             'pre':pre
             }

   def macro_dispatcher(macro_name,arg_string,body,isblock,page):
       if macro_name in macros:
           return macros[macro_name](arg_string,body,isblock)

   dialect = dialects.create_dialect(
       wiki_links_base_url='http://creoleparser.srcom.org/cgi-bin/creolepiki/',
       wiki_links_space_char='',
       use_additions=True,
       no_wiki_monospace=False,
       wiki_links_class_func=class_func,
       wiki_links_path_func=path_func,
       macro_func=macro_dispatcher)

The macros in the example above aren't reliable (e.g., some fail if ``arg_string`` is `None`)
or safe (`include` doesn't guard against circular reference). For a more complete example, see
`the code used in the sandbox <http://code.google.com/p/urlminer/source/browse/examples/wiki/wikiparser.py>`_.

Macros Returning HTML
=====================
In order for a macro to return raw HTML, the HTML must be wrapped in a genshi.Markup object. See
an example `here <http://creoleparserwiki.appspot.com/pages/HTMLMacroExample>`_

Macros Returning Creole
=======================
Don't forget that macros can return simple strings (preferably as unicode objects) rather than
genshi objects. These will be processed as Creole markup (potentially including other macros!)
in their new context.

How can I stop a macro from being placed in a paragraph? (or visa versa)
========================================================================
Creoleparser tries not to use paragraphs if the content they would enclose are
valid children of the `body` element (according to  xhtml1 strict). For example, if a section of
wiki text is enclosed entirely in a regular bodied macro, and that macro outputs an Element with a `div` tag, no
`p` tag will be added.

For *block* type macros (i.e., when ``isblock`` is true), creole parser will *add* a `p` tag
if the macro's return value indicates it isn't a valid child of the `body` element. 

Guidelines for macro return values and paragraph control
--------------------------------------------------------

* Return a Fragment to **always** apply a `p` tag (or other valid child of `body`) e.g.::
         
         return genshi.builder.tag(my_output)

* Return a Stream (using the generate method) or Markup object to **never** apply a `p` tag, e.g.::

         return genshi.builder.tag(my_output).generate()
         or
         return genshi.Markup('<div>...</div>')


* Return a string or Element to let creoleparser decide, e.g.::

         return 'some string (raw html will be escaped!)'
         or
         return genshi.builder.tag.div(my_output)

Generally, returning a string or Element will reliably produce valid xhtml.
When returning other objects, you should follow the rules above.


         


